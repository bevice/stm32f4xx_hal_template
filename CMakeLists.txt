# Нужен cmake >=3.5
CMAKE_MINIMUM_REQUIRED(VERSION 3.5)


ADD_DEFINITIONS(-DSTM32F417xx)

include(stm32f4.cmake)

PROJECT(stm32f4_hal_template)

## float version of printf()
#SET(PRINTF_FLOAT TRUE)

add_definitions(-DHSE_VALUE=8000000U)
add_definitions(-DEXTERNAL_CLOCK_VALUE=8000000U)
add_definitions(-DHSE_STARTUP_TIMEOUT=100U)
add_definitions(-DTICK_INT_PRIORITY=0)
add_definitions(-DLSE_STARTUP_TIMEOUT=100U)


## HAL Modules

SET(HAL_CORTEX_MODULE_ENABLED TRUE)
SET(HAL_DMA_MODULE_ENABLED TRUE)
SET(HAL_FLASH_MODULE_ENABLED TRUE)
SET(HAL_RCC_MODULE_ENABLED TRUE)
SET(HAL_PWR_MODULE_ENABLED TRUE)

SET(HAL_GPIO_MODULE_ENABLED TRUE)

SET(HAL_ADC_MODULE_ENABLED TRUE)
SET(HAL_CRYP_MODULE_ENABLED TRUE)
SET(HAL_CAN_MODULE_ENABLED TRUE)
SET(HAL_CEC_MODULE_ENABLED TRUE)
SET(HAL_CRC_MODULE_ENABLED TRUE)
SET(HAL_DAC_MODULE_ENABLED TRUE)
SET(HAL_ETH_MODULE_ENABLED TRUE)
SET(HAL_I2C_MODULE_ENABLED TRUE)
SET(HAL_I2S_MODULE_ENABLED TRUE)
SET(HAL_IRDA_MODULE_ENABLED TRUE)
SET(HAL_IWDG_MODULE_ENABLED TRUE)
SET(HAL_NOR_MODULE_ENABLED TRUE)
SET(HAL_NAND_MODULE_ENABLED TRUE)
SET(HAL_PCCARD_MODULE_ENABLED TRUE)
SET(HAL_PCD_MODULE_ENABLED TRUE)
SET(HAL_HCD_MODULE_ENABLED TRUE)
SET(HAL_RTC_MODULE_ENABLED TRUE)
SET(HAL_SD_MODULE_ENABLED TRUE)
SET(HAL_MMC_MODULE_ENABLED TRUE)
SET(HAL_SDRAM_MODULE_ENABLED TRUE)
SET(HAL_SMARTCARD_MODULE_ENABLED TRUE)
SET(HAL_SPI_MODULE_ENABLED TRUE)
SET(HAL_SRAM_MODULE_ENABLED TRUE)
SET(HAL_TIM_MODULE_ENABLED TRUE)
SET(HAL_UART_MODULE_ENABLED TRUE)
SET(HAL_USART_MODULE_ENABLED TRUE)
SET(HAL_WWDG_MODULE_ENABLED TRUE)
SET(HAL_EXTI_MODULE_ENABLED TRUE)


## LL Modules
SET(LL_FSMC_ENABLED TRUE)
SET(LL_SDMMC_ENABLED TRUE)
SET(LL_USB_ENABLED TRUE)
SET(LL_ADC_ENABLED TRUE)
SET(LL_CRC_ENABLED TRUE)
SET(LL_DAC_ENABLED TRUE)
SET(LL_DMA_ENABLED TRUE)
SET(LL_EXTI_ENABLED TRUE)
SET(LL_GPIO_ENABLED TRUE)
SET(LL_I2C_ENABLED TRUE)
SET(LL_PWR_ENABLED TRUE)
SET(LL_RCC_ENABLED TRUE)
SET(LL_RTC_ENABLED TRUE)
SET(LL_SPI_ENABLED TRUE)
SET(LL_TIM_ENABLED TRUE)
SET(LL_USART_ENABLED TRUE)
SET(LL_UTILS_ENABLED TRUE)

include(hal_f4.cmake)


SET(PROJECT_SOURCES
        src/main.c
        src/main.h
        src/stm32f4xx_hal_conf.h
        src/stm32f4xx_it.c
        src/stm32f4xx_it.h
        src/system_stm32f4xx.c
        src/stm32f4xx_hal_msp.c
        )

# Флаги компилятора для разных типов сборки.
SET(COMPILE_DEFINITIONS_DEBUG -O0 -g3 -DDEBUG)
SET(COMPILE_DEFINITIONS_RELEASE -Os)


#скрипт линковки и где его искать
SET(LD_SCRIPT STM32F417VGTx_FLASH.ld)
SET(LD_SCRIPTS_DIR ${PROJECT_SOURCE_DIR}/ld-scripts/)
SET(CMAKE_EXE_LINKER_FLAGS "-L${LD_SCRIPTS_DIR} -T${LD_SCRIPT} ${CMAKE_EXE_LINKER_FLAGS}")

# Конфигурируем файл - скрипт компилятора: заменяем переменные в файле на размеры и адреса
#CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/stm32_flash.ld.in ${CMAKE_CURRENT_BINARY_DIR}/stm32_flash.ld)


# Добавляем пути поиска заголовочных файлов
INCLUDE_DIRECTORIES(
        ${CMSIS_INCLUDE_DIR}
        ${HAL_INCLUDE_DIRS}
        ${PROJECT_SOURCE_DIR}/src/

)

# Собираем исходники пректа, модули, и т.д. в elf
ADD_EXECUTABLE(${CMAKE_PROJECT_NAME}.elf
        ${STARTUP_SOURCES}
        ${HAL_SOURCES}
        ${PROJECT_SOURCES}
        )
## слинкуем libm
#target_link_libraries(${CMAKE_PROJECT_NAME}.elf m)

# Конвертируем elf в hex и bin

ADD_CUSTOM_COMMAND(TARGET ${CMAKE_PROJECT_NAME}.elf POST_BUILD COMMAND ${CMAKE_OBJCOPY} ARGS -Oihex ${CMAKE_PROJECT_NAME}.elf ${CMAKE_PROJECT_NAME}.hex)
ADD_CUSTOM_COMMAND(TARGET ${CMAKE_PROJECT_NAME}.elf POST_BUILD COMMAND ${CMAKE_OBJCOPY} ARGS -Obinary ${CMAKE_PROJECT_NAME}.elf ${CMAKE_PROJECT_NAME}.bin)
ADD_CUSTOM_COMMAND(TARGET ${CMAKE_PROJECT_NAME}.elf POST_BUILD COMMAND ${CMAKE_SIZE} ARGS --format=sysv ${CMAKE_PROJECT_NAME}.elf)
ADD_CUSTOM_COMMAND(TARGET ${CMAKE_PROJECT_NAME}.elf POST_BUILD COMMAND ${CMAKE_SIZE} ARGS --format=berkeley ${CMAKE_PROJECT_NAME}.elf)

if(PRINTF_FLOAT)
    message(STATUS "Using float version of printf()")
    SET(CMAKE_EXE_LINKER_FLAGS
            "${CMAKE_EXE_LINKER_FLAGS} -u _printf_float")
endif()

